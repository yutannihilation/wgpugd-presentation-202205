---
title: |
  Rust と WebGPU で <br/>
  R のグラフィックデバイスをつくる
author: "Hiroaki Yutani"
format:
  revealjs:
    theme: ["solarized", "custom.scss"]
  pptx: {}
---

```{r setup}
#| include: false
knitr::opts_chunk$set(echo = TRUE)
```

## ドーモ！

![](images/icon.jpg){fig-align="center"}

# グラフィックデバイスとは？

## グラフィックデバイスとは？

-   Rでは、標準ライブラリでグラフィックス関連の機能も提供されている。具体的には、

    -   データを渡せばいい感じにグラフを描いてくれる高レベルな関数（例：`plot()` ）

    -   高レベルな関数の下で動いている、「線を描く」「四角を描く」みたいな低レベルな関数（例： `grid.lines()`）

-   後者の低レベルな関数の命令を実際に描画するのがグラフィックデバイス

------------------------------------------------------------------------

::: columns
::: {.column width="50%"}
高レベルな関数の例

```{r}
plot(airquality)
```
:::

::: {.column width="50%"}
低レベルな関数の例

```{r}
grid::grid.points(
  x = c(0.3, 0.8),
  y = c(0.4, 0.2),
  default.units = "npc"
)
```
:::
:::

## グラフィックデバイスの例

-   ざっくり言えば、グラフィックデバイスを変えることで、PNG として出力したり、SVG として出力したり、いろいろ形式を変えられる

    ::: columns
    ::: {.column width="50%"}
    PNG

    ```{r}
    #| eval: false

    # アクティブなデバイスを
    # PNG に変更。 これ以降の
    # 描画は PNG として出力
    png(filename = "a.png")

    plot(airquality)

    # デバイスを閉じる
    dev.off()
    ```

    ### 
    :::

    ::: {.column width="50%"}
    SVG

    ```{r}
    #| eval: false

    # アクティブなデバイスを
    # SVG に変更。 これ以降の
    # 描画は SVG として出力
    svg(filename = "a.svg")

    plot(airquality)

    # デバイスを閉じる
    dev.off()
    ```
    :::
    :::

## グラフィックデバイスはつくれる

-   低レベルな関数は、**Graphics Device API**を通じてグラフィックデバイスに描画命令を伝える。

-   つまり、Graphics Device APIを実装すればグラフィックデバイスがつくれる。例えば、以下のような変なデバイスも作れる。

    -   描画命令に応じてペンプロッターが動く

    -   描画命令を音に変換する

    -   描画命令をすべて無視してなにもしない（これは実際に存在する）

## Graphics Device APIの例

| API                                     | 説明                                       |
|-----------------------------------|-------------------------------------|
| `circle()`                              | 円を描く                                   |
| `rect()`                                | 四角を描く                                 |
| `line()`                                | 線を描く                                   |
| `text()` , `textUTF8()`                 | テキストを描く                             |
| `metricInfo()`                          | テキストの幅と高さを返す                   |
| `clip()`                                | 描画範囲を設定する                         |
| `activate()`, `deactivate()`, `close()` | デバイスが開かれた時や閉じられた時のフック |

# WebGPU とは？

## WebGPU [^1] とは？

[^1]: [WebGPU spec](https://gpuweb.github.io/gpuweb/)

-   GPU を使ってレンダリングや計算などの処理をするためのAPI。

-   「Web」とついているところから察せられるように、ウェブブラウザでの利用が想定されている。Chrome や Firefox にもすでに入っている（デフォルトでは無効）

-   ただし、**ウェブ用に設計されたからといってウェブ専用の API ではない**[^2]（重要）

[^2]: [Point of WebGPU on native](https://kvark.github.io/web/gpu/native/2020/05/03/point-of-webgpu-native.html)

## なぜ WebGPU が必要なの？

-   GPU を使うためのグラフィックス API はすでに様々あるが、プラットフォームごとに使える API が違い、それぞれに対応しようと思うと実装コストが大変なので、抽象化されたレイヤーが必要
    -   Windows: Direct3D 12, Direct3D 11, Vulkan

    -   macOS: Metal, MoltenVK (Vulkan)

    -   Linux: Vulkan
-   あと、ウェブブラウザで実行するという視点から、セキュリティや安定性を脅かすようなことはできないようにする必要がある

## Vulkan でよくない？

-   Vulkan ではポータビリティが足りない（古いデバイスや macOS / iOS）

-   セキュリティや安定性

-   （個人的な感想）Vulkan のコードはめちゃくちゃ長くなりがちでつらい

-   （あとは政治的な理由もありそう）

## WebGL / OpenGL でよくない？

-   たしかに、GL 系はポータビリティの観点では優れている（実際、OpenGL ES は WebGPU 実装のバックエンドにも入っていたりする）

-   しかし、GL 系はさまざまな負債を背負っており、最近のアーキテクチャに使うにはオーバーヘッドや制限が大きい[^3]、らしい

-   （あとは政治的な理由もありそう）

[^3]: [WebGPUでガチリアルタイムレンダリングの世界が見えてきた - Qiita](https://qiita.com/emadurandal/items/3c0f8e06d443346aad8f)

## WebGPU の主な実装

::: columns
::: {.column width="50%"}
### Dawn (C++)

-   Google 陣営

![](images/dawn-logo.svg){width="400"}
:::

::: {.column width="50%"}
### wgpu (Rust)

-   Mozilla 陣営

![](images/wgpu-logo.png){fig-align="center" width="312"}
:::
:::

## wgpu

-   Firefox や Deno で使われている

-   単に Firefox の内部用というだけではなく、Rust gamedev 界隈を中心にしっかり Rust のユーザーコミュニティがある

    -   [bevy](https://github.com/bevyengine/bevy)

    -   [nannou](https://github.com/nannou-org/nannou)

    -   [graphite](https://graphite.rs/)

    -   [rust-gpu](https://github.com/EmbarkStudios/rust-gpu)

    -   [Veloren](https://veloren.net/)

    -   [rend3](https://github.com/BVE-Reborn/rend3)

## 参考）wgpu を学ぶには

Learn Wgpu: <https://sotrh.github.io/learn-wgpu/>

[![](images/learn-wgpu-screenshot.png){fig-align="center"}](https://sotrh.github.io/learn-wgpu/)

## なぜ WebGPU で R のグラフィックデバイスをつくりたいのか？

-   おもしろポストエフェクトをかけたりして shader 芸で遊びたい

-   グラフィックデバイスの実装に OS 間で差があり、Windows で使えるいい感じのインタラクティブなグラフィックデバイスがない

## ところで...

Rust でグラフィックデバイスをつくったとして、

-   どうやって R から Rust にアクセスするの？

-   どうやって Rust から R にアクセスするの？

# Rust と R

## Rust と R

-   R には C API がある

-   Rust には FFI がある

→ R の C API への Rust binding を rust-bindgen で生成していい感じにラップ

## いい感じにラップしたやつ: extendr

-   2020 年ごろから？開発

-   Rust ぜんぜんわからないけどなぜかメンテナの1人をやっています...

![](images/extendr-logo-2col.svg){fig-align="center"}

<https://extendr.github.io/>

## 参考）extendr の使い方

<https://tokyor92-slides-rust-and-r.vercel.app/>

[![](images/extendr-tokyor92.png)](https://tokyor92-slides-rust-and-r.vercel.app/)

## イメージ図

!\[いい感じのイメージ図がここに入る\](images/iikanji.gif)

# グラフィックデバイスを実装する

## GPU 上で絵を描くには？

1.  描きたい図形を三角形のメッシュに変換する（tessellation）
2.  描きたい図形を signed distance function (SDF) で表現する
3.  ラスターデータをテクスチャとして貼り付ける

## Tessellation

-   GPU は三角形のメッシュしか描けないので、あらかじめ CPU 側で図形を三角形に切り刻む処理
-   Rust だと [lyon](https://github.com/nical/lyon)というライブラリを使う

::: columns
::: {.column width="50%"}
![](images/untessellated_R.png)
:::

::: {.column width="50%"}
![](images/tessellated_R.png)
:::
:::

## SDF

-   単純な図形ならこちらの方が負荷が少なく、実装も簡単

-   （簡単な図形じゃなくても、例えばテキストもSDF化してレンダリングすることもある）

::: columns
::: {.column width="60%"}
``` rust
fn sd_circle(
  p: vec2<f32>,
  r: f32
) -> f32 {
  return length(p) - r;
}
```
:::

::: {.column width="40%"}
![](images/sdf_circle.png)
:::
:::

## 参考）よくあるSDF一覧

<https://iquilezles.org/articles/distfunctions2d/>

![](images/iq_scresnshot.png){fig-align="center"}

## ラスターデータをテクスチャとして貼り付ける

-   ラスタデータはこうする必要がある（今回は未実装）

-   テキストも一度ラスタ化してから貼り付けることもある

## 今回の実装

| API        | 実装方式     | 理由                                                             |
|------------|--------------|------------------------------------------------------------------|
| `line()`   | tessellation |                                                                  |
| `circle()` | SDF          | 円はプロットで最もよく使われる図形のひとつ。なるべく軽くするため |
| `rect()`   | tessellation |                                                                  |
| `text()`   | tessellation | SDF font の実装方法がよくわからなかった                          |
| `raster()` | （未実装）   |                                                                  |
| ...        |              |                                                                  |

## 参考文献

-   Learn Wgpu: <https://sotrh.github.io/learn-wgpu/>

-   extendr: <https://extendr.github.io/>

## ライセンス

-   dawn のロゴは Google によって作成され、CC-4.0-BY ライセンスで公開されています（ref: <https://dawn.googlesource.com/dawn/+/HEAD/docs/imgs/>）
-   wgpu のロゴは gfx-rs developers によって作成され、MIT ライセンスで公開されています（ref: <https://github.com/gfx-rs/wgpu/blob/master/logo.png>）
-   extendr のロゴは extendr developers によって作成され、CC-4.0-BY-SA ライセンスで公開されています（ref: <https://github.com/extendr/artwork>）
