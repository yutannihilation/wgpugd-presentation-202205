---
title: |
  Rust と WebGPU で <br/>
  R のグラフィックデバイスをつくる
author: "Hiroaki Yutani"
format:
  revealjs:
    theme: ["solarized", "custom.scss"]
  pptx: {}
---

```{r setup}
#| include: false
knitr::opts_chunk$set(echo = TRUE)
```

## ドーモ！

![](images/icon.jpg){fig-align="center"}

## グラフィックデバイスとは

-   Rでは、標準ライブラリでグラフィックス関連の機能も提供されている。具体的には、

    -   データを渡せばいい感じにグラフを描いてくれる高レベルな関数（例：`plot()` ）

    -   高レベルな関数の下で動いている、「線を描く」「四角を描く」みたいな低レベルな関数（例： `grid.lines()`）

-   後者の低レベルな関数の命令を実際に描画するのがグラフィックデバイス

------------------------------------------------------------------------

::: columns
::: {.column width="50%"}
高レベルな関数の例

```{r}
plot(airquality)
```
:::

::: {.column width="50%"}
低レベルな関数の例

```{r}
grid::grid.points(
  x = c(0.3, 0.8),
  y = c(0.4, 0.2),
  default.units = "npc"
)
```
:::
:::

## グラフィックデバイスはつくれる

-   低レベルな関数は、**Graphics Device API**を通じてグラフィックデバイスに描画命令を伝える。

-   つまり、Graphics Device APIを実装すればグラフィックデバイスがつくれる。例えば、

    -   描画命令に応じてペンプロッターが動く

    -   描画命令を音に変換する

    -   描画命令をすべて無視してなにもしない

## Graphics Device APIの例

| API                                     | 説明                                       |
|-----------------------------------|-------------------------------------|
| `circle()`                              | 円を描く                                   |
| `rect()`                                | 四角を描く                                 |
| `line()`                                | 線を描く                                   |
| `text()` , `textUTF8()`                 | テキストを描く                             |
| `metricInfo()`                          | テキストの幅と高さを返す                   |
| `clip()`                                | 描画範囲を設定する                         |
| `activate()`, `deactivate()`, `close()` | デバイスが開かれた時や閉じられた時のフック |
